
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ###UPDATE EVERY 5 MINUTES###
> 
> library('RODBC')
> library('TTR')
> source("C:/Python/19OctSimulator/TechAnalysisFinal.R")
> #source("W:/19OctSimulator/TechAnalysisFinal.R")
> 
> #UPDATE CURRENT PRICE TABLE FROM FORECASTED PRICE
> today=format(Sys.time(), "%Y-%m-%d %X");
> con <- odbcConnect("AnalyticConn", uid = "prodService", pwd = "gtpprod#1234")
> index <- sqlQuery(con, sprintf("SELECT [index] FROM [index_value]"))
Warning message:
closing unused RODBC handle 1 
> 
> #Delta Calculation
> old_price <- sqlQuery(con, sprintf("SELECT [price],[stock_id] FROM [current_price_data]"))
> new_price <- sqlQuery(con, sprintf("SELECT [%d],[stock_id] FROM [stock_forecast]", index[1,1]))
> prices <- merge(old_price, new_price)
> print(prices)
   stock_id   price      54
1     AAPL   148.31  147.03
2     ALGT    29.68   28.53
3     ALVG   155.56  156.59
4     APInd   78.05   77.47
5     AQAC    50.58   46.79
6     ARZGF    3.45    2.19
7     AVV     42.63   44.51
8     BAC      5.13    6.93
9     BCA     82.10   83.02
10    CONG   265.32  264.51
11    DOW     85.59   87.44
12    ENI     26.08   25.62
13    EUInd  147.03  146.70
14    FB     216.81  221.33
15    FCHA    33.64   35.76
16    FINA    38.16   41.26
17    GAM      3.54    3.48
18    HUN     22.01   23.55
19    IBM   1126.72 1124.38
20    IRWT    79.94   78.44
21    JNJ    206.39  215.00
22    KITE   114.64  114.04
23    LUX     85.24   83.66
24    MAInd  444.65  443.57
25    MS       2.45    3.72
26    NAInd  595.83  592.83
27    NESNY   12.74   12.48
28    PG     173.11  174.01
29    PLT     23.79   23.40
30    SAGE    87.67   88.11
31    SAInd   61.64   62.26
32    SIAL    11.93    8.96
33    SRTI    45.25   43.41
34    STRL    12.14   12.11
35    TESO     8.08    7.35
36    TLIT    22.71   23.63
37    TTEK    74.46   72.76
38    TUI     10.14   10.72
39    TW     243.11  247.38
40    UBS     19.81   19.81
41    XOM    156.89  158.14
> delta <- vector(mode="numeric", length=41)
> change <- vector(mode = "numeric", length=41)
> for(i in 1:41){
+   delta[i] = (prices[i,3] - prices[i,2])/prices[i,2]
+   change[i] = (prices[i,3] - prices[i,2])
+ }
> for(i in 1:41){
+   sqlQuery(con, sprintf("UPDATE current_price_data SET delta=%f, price_change=%f WHERE stock_id='%s'", delta[i], change[i], prices[i,1]))
+ }
> ###
> 
> 
> sqlQuery(con, sprintf("UPDATE current_price_data SET current_price_data.price = stock_forecast.[%d] FROM current_price_data  INNER JOIN  stock_forecast on current_price_data.stock_id = stock_forecast.stock_id;", index[1,1]))
character(0)
> sqlQuery(con, sprintf("UPDATE current_price_data SET datetime='%s'", today))
character(0)
> 
> 
> 
> if (index == 72){
+   index <- sqlQuery(con, sprintf("UPDATE [index_value] SET [index] = %d", 1))
+ }else{
+   index <- sqlQuery(con, sprintf("UPDATE [index_value] SET [index] = %d", index[1,1] + 1))
+ }
> 
> #UPDATE DAILY PRICE TABLE FROM CURRENT PRICE
> sqlQuery(con, sprintf("INSERT INTO [MarketData].[dbo].[daily_price_data] SELECT [stock_id],[price],[datetime],[region],[industry],[stock_name],[stock_trade_flag] FROM [MarketData].[dbo].[current_price_data]"))
character(0)
> 
> 
> #####TECH ANALYSIS##
> uploadDailyMetrics(con, '[MarketData].[dbo].[daily_price_data]', today, '[MarketData].[dbo].[technical_daily_table]')
> #sqlQuery(con, "DELETE FROM [MarketData].[dbo].[technical_daily_table] WHERE datetime in (SELECT TOP 41 [datetime] FROM [MarketData].[dbo].[daily_price_data] ORDER BY datetime ASC)")
> 
> 
> ######DELETE OLDEST 41 ROWS
> sqlQuery(con, "DELETE FROM [MarketData].[dbo].[daily_price_data] WHERE datetime in (SELECT TOP 41 [datetime] FROM [MarketData].[dbo].[daily_price_data] ORDER BY datetime ASC)")
character(0)
> 
> ####IMPORTANT: uncomment the above line when having enough data!!! =3=
> 
> proc.time()
   user  system elapsed 
   3.00    0.07    5.48 
Warning message:
closing unused RODBC handle 2 
